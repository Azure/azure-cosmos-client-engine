[workspace]
resolver = "2"
members = ["azure_data_cosmos_engine", "azure_data_cosmos_engine/query-tests", "cosmoscx", "python"]

[workspace.package]
version = "0.2.0"

[workspace.dependencies]
azure_data_cosmos_engine = { path = "azure_data_cosmos_engine" }
pyo3 = "0.24.0"
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0", features = ["raw_value"] }
tracing = "0.1.40"
tracing-subscriber = { version = "0.3.19", features = ["fmt", "env-filter"] }
uuid = "1.16.0"
futures = "0.3.31"
tokio = "1.45.0"

azure_core = "0.25.0"
azure_identity = "0.25.0"
azure_data_cosmos = { version = "0.24.0", features = [ "preview_query_engine" ] }

# Optimizations for the cosmoscx binary embedded in the Go package.
# Because it's embedded in the Go module, we want it to be fairly small, without sacrificing performance.
[profile.vendored]
inherits = "release"
# Strangely, enabling LTO DOES reduce the size of a static library, even though there's no link step.
# Experiments showed it reduced the size by over 50% though.
lto = true
# We don't use 'strip' here because it doesn't work on static libraries.
# The 'strip' parameter is only given to the linker, and there's no linker involved in a static library build.
# We'll run strip manually on the final binary.
