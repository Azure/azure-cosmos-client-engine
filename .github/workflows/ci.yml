name: Build and Test
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  check-headers:
    name: "Check headers are up-to-date"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: "azure-cosmos-client-engine"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: Azure/azure-sdk-for-rust
          ref: main
          path: "azure-sdk-for-rust"

      - name: Install rust
        working-directory: "azure-cosmos-client-engine"
        run: rustup show

      - name: Install cbindgen
        working-directory: "azure-cosmos-client-engine"
        run: cargo install --locked cbindgen

      - name: Check Headers
        working-directory: "azure-cosmos-client-engine"
        shell: bash
        run: |
          script/check-headers

  query-tests:
    name: "Run query correctness tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: "azure-cosmos-client-engine"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: Azure/azure-sdk-for-go
          ref: release/azcosmos-1.5.0-beta
          path: "azure-sdk-for-go"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: Azure/azure-sdk-for-rust
          ref: main
          path: "azure-sdk-for-rust"

      - name: Install rust
        working-directory: "azure-cosmos-client-engine"
        run: rustup show

      - name: Install Go
        uses: actions/setup-go@v5
        if: ${{ runner.os != 'windows' }}
        with:
          go-version-file: "azure-cosmos-client-engine/go/azcosmoscx/go.mod"
          cache-dependency-path: |
            go/engine/go.sum

      # Do this for python as well, so we can run the tests

      - name: Bootstrap Repository
        shell: bash
        working-directory: "azure-cosmos-client-engine"
        run: |
          script/bootstrap

      - name: Build engine
        working-directory: "azure-cosmos-client-engine"
        run: |
          make engine

      - name: Start Cosmos Emulator
        working-directory: "azure-cosmos-client-engine"
        run: |
          script/reset-emulator

      - name: Run Rust query tests
        working-directory: "azure-cosmos-client-engine"
        run: |
          make query_test_rust

      - name: Run Go query tests
        working-directory: "azure-cosmos-client-engine"
        run: |
          make query_test_go

      - name: Run Python query tests
        working-directory: "azure-cosmos-client-engine"
        run: |
          make query_test_python

  build:
    strategy:
      fail-fast: false # Don't cancel other jobs when one job fails
      matrix:
        target:
          - host: ubuntu-latest
            triple: x86_64-unknown-linux-gnu
          - host: macos-latest
            triple: aarch64-apple-darwin
          - host: windows-latest
            triple: x86_64-pc-windows-msvc
          - host: windows-latest
            triple: x86_64-pc-windows-gnu
    name: "build: ${{ matrix.target.triple }}"
    runs-on: ${{ matrix.target.host }}
    env:
      CARGO_BUILD_TARGET: "${{ matrix.target.triple }}"
      CONFIGURATION: release

      # Warnings-as-errors during CI builds
      RUSTFLAGS: "-D warnings"
    steps:
      - name: Prepare Windows Runner
        if: ${{ runner.os == 'windows' }}
        run:
          # This is necessary because some repositories have VERY long paths.
          git config --global core.longpaths true

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          path: "azure-cosmos-client-engine"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: Azure/azure-sdk-for-go
          ref: release/azcosmos-1.5.0-beta
          path: "azure-sdk-for-go"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: Azure/azure-sdk-for-rust
          ref: main
          path: "azure-sdk-for-rust"

      - name: Install rust
        run: rustup target add "${{ matrix.target.triple }}"

      - name: Install Go
        uses: actions/setup-go@v5
        if: ${{ runner.os != 'windows' }}
        with:
          go-version-file: "azure-cosmos-client-engine/go/azcosmoscx/go.mod"
          cache-dependency-path: |
            go/engine/go.sum

      - name: Bootstrap Repository
        shell: bash
        working-directory: "azure-cosmos-client-engine"
        run: |
          script/bootstrap

      - name: Check formatting
        shell: bash
        # The script doesn't work on Windows, but it's OK because we don't need to check formatting on multiple platforms.
        if: ${{ runner.os != 'windows' }}
        working-directory: "azure-cosmos-client-engine"
        run: |
          make check

      - name: Build Engine
        shell: bash
        working-directory: "azure-cosmos-client-engine"
        run: |
          make engine

      - name: Run Engine Tests
        shell: bash
        working-directory: "azure-cosmos-client-engine"
        run: |
          make test_rust

      - name: Run Go Tests against shared library
        # We don't support a shared library on Windows right now
        if: ${{ runner.os != 'windows' }}
        shell: bash
        working-directory: "azure-cosmos-client-engine"
        run: |
          go clean -cache
          make test_go LIBRARY_MODE=shared

      - name: Run Go Tests against vendored static library
        # cgo uses the GNU toolchain on Windows (msys), so we can only test during the GNU build
        shell: bash
        if: ${{ runner.os != 'windows' || matrix.target.triple == 'x86_64-pc-windows-gnu' }}
        working-directory: "azure-cosmos-client-engine"
        run: |
          make vendor

          # We should now be able to clean the build artifacts and the tests should use the vendored copy
          make superclean

          # We can now run tests with no build tags, which should run them against the vendored copy.
          go -C ./go/azcosmoscx test -v ./...
