parameters:
  - name: IsReleaseBuild
    type: boolean
    default: false
  - name: GoVersion
    type: string
    default: "1.24.3"
  - name: PyVersion
    type: string
    default: "3.11"
  - name: LinuxPool
    type: object
  - name: MacPool
    type: object

variables:
  CONFIGURATION: release
  RUSTFLAGS: "-D warnings"

stages:
  - stage: Validate
    dependsOn: []
    jobs:
      - job: check_headers
        displayName: "Check headers are up-to-date"
        pool: ${{ parameters.LinuxPool }}
        steps:
          - bash: rustup show
            displayName: "Install Rust"
          - bash: cargo install --locked cbindgen
            displayName: "Install cbindgen"
          - bash: script/check-headers
            displayName: "Check headers"

      - job: query_correctness
        strategy:
          matrix:
            rust:
              language: "Rust"
              target: "query_test_rust"
            go:
              language: "Go"
              target: "query_test_go"
        displayName: "Run ${{variables.language}} Query Correctness Tests"
        pool: ${{ parameters.LinuxPool }}
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: ${{ parameters.PyVersion }}
            displayName: "Use Python"
          - task: GoTool@0
            displayName: "Install Go"
            inputs:
              version: ${{ parameters.GoVersion }}

          - bash: rustup show
            displayName: "Install Rust"

          - bash: script/bootstrap
            displayName: "Boostrap Repo"
          - bash: make engine
            displayName: "Build Client Engine"
          - bash: |
              script/reset-emulator
              make $(target)
            displayName: "Run query tests"

  - stage: Build
    dependsOn: []
    jobs:
      - job: x86_64_pc_windows_msvc
        displayName: "Windows x86_64 MSVC"
        pool: ${{ parameters.WindowsPool }}
        variables:
          GO_VERSION: ${{ parameters.GoVersion }}
          PY_VERSION: ${{ parameters.PyVersion }}
          CARGO_BUILD_TARGET: x86_64-pc-windows-msvc

      - job: x86_64_linux_gnu
        displayName: "Linux x86_64"
        pool: ${{ parameters.LinuxPool }}
        variables:
          GO_VERSION: ${{ parameters.GoVersion }}
          PY_VERSION: ${{ parameters.PyVersion }}
          CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
      - job: x86_64_apple_darwin
        displayName: "macOS x86_64"
        pool: ${{ parameters.MacPool }}
        variables:
          GO_VERSION: ${{ parameters.GoVersion }}
          PY_VERSION: ${{ parameters.PyVersion }}
          CARGO_BUILD_TARGET: x86_64-apple-darwin
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              IsReleaseBuild: ${{ parameters.IsReleaseBuild }}
      - job: aarch64_apple_darwin
        displayName: "macOS aarch64"
        pool: ${{ parameters.MacPool }}
        variables:
          GO_VERSION: ${{ parameters.GoVersion }}
          PY_VERSION: ${{ parameters.PyVersion }}
          CARGO_BUILD_TARGET: aarch64-apple-darwin
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RunTests: false # The job runs on an x86_64 machine, so we can't run tests.
              IsReleaseBuild: ${{ parameters.IsReleaseBuild }}

  - ${{ if eq(parameters.IsReleaseBuild, true) }}:
      - stage: Package
        dependsOn:
          - Build
        jobs:
          - job: package
            displayName: "Create packages"
            pool: ${{ parameters.LinuxPool }}
            steps:
              - checkout: none
              - download: current
                patterns: "**"
              - bash: |
                  # Move up to the pipeline workspace directory.
                  # The default working directory is in the 's' subdirectory of this one.
                  # See https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=yaml%2Cbrowser#agent-directory-structure for more.
                  cd "$(Pipeline.Workspace)"

                  prepare_package() {
                    local prefix="$1"
                    output_dir=./s/output/$prefix
                    mkdir -p $output_dir
                    echo "Created $output_dir"
                    for dir in $(find . -maxdepth 1 -mindepth 1 -type d -name ${prefix}_\*); do
                      target=$(echo $dir | cut -d'_' -f 2-)
                      source="$dir/libcosmoscx.a"
                      mkdir "$output_dir/$target"
                      echo "Moving $source to $output_dir/$target"
                      mv $source "$output_dir/$target"
                    done
                  }

                  prepare_package "vendored"
              - publish: output
                displayName: "Publish packages"
                artifact: "packages"
