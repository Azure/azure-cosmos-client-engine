parameters:
  - name: IsReleaseBuild
    type: boolean
    default: false
  - name: GoReleaseVersion
    type: string
    default: ""
  - name: LinuxPool
    type: object
  - name: MacPool
    type: object
  - name: WindowsPool
    type: object

variables:
  CONFIGURATION: release
  RUSTFLAGS: "-D warnings"
  GO_VERSION: "1.24.5"
  PY_VERSION: "3.11"
  EMULATORMSIURL: https://aka.ms/cosmosdb-emulator

stages:
  - stage: Prepare
    dependsOn: []
    jobs:
      - ${{ if eq(parameters.IsReleaseBuild, true) }}:
          - job: validate_release_parameters
            displayName: "Validate Release Parameters"
            pool: ${{ parameters.LinuxPool }}
            steps:
              - bash: |
                  go_release_version="${{ parameters.GoReleaseVersion }}"
                  if [[ -z "$go_release_version" ]]; then
                    echo "GoReleaseVersion must be provided for release builds."
                    exit 1
                  fi

                  # Confirm that the version is a semver and in the `0.x` major version.
                  if [[ ! "$go_release_version" =~ ^0.[0-9]+\.[0-9]+$ ]]; then
                    echo "Invalid GoReleaseVersion: '$go_release_version'. Expected format 0.x.y (e.g. 1.2.3)."
                    exit 1
                  fi

                  echo "GoReleaseVersion '$go_release_version' is valid."

  - stage: Validate
    dependsOn:
      - Prepare
    jobs:
      - job: analyze
        displayName: "Analyze and Test"
        pool: ${{ parameters.LinuxPool }}
        steps:
          - template: prep-agent.yml
          - pwsh: script/check-headers.ps1
            displayName: "Check headers"
          - script: just check
            displayName: "Check formatting and license headers"

      - job: query_correctness
        strategy:
          matrix:
            rust:
              language: "Rust"
              target: "query_test_rust"
              CARGO_BUILD_TARGET: x86_64-pc-windows-msvc
            go:
              language: "Go"
              target: "query_test_go"
              CARGO_BUILD_TARGET: x86_64-pc-windows-gnu # Go requires the GNU build
        displayName: "Run ${{variables.language}} Query Correctness Tests"
        pool: ${{ parameters.WindowsPool }}
        steps:
          - template: prep-agent.yml
            parameters:
              HostIsWindows: true

          - template: emulator-setup.yml

          - script: just engine
            displayName: "Build Client Engine"

          - script: just $(target)
            displayName: "Run query tests"

  - stage: Build
    dependsOn:
      - Prepare
    jobs:
      - job: x86_64_pc_windows_msvc
        displayName: "Windows x86_64 MSVC"
        pool: ${{ parameters.WindowsPool }}
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RustTarget: x86_64-pc-windows-msvc
              HostIsWindows: true
              PublishArtifacts: ${{ parameters.IsReleaseBuild }}

              # Go doesn't support MSVC-built libraries, we'll test it in the x86_64-pc-windows-gnu build
              RunGoTests: false
              VendorForGo: false

      - job: x86_64_pc_windows_gnu
        displayName: "Windows x86_64 GNU"
        pool: ${{ parameters.WindowsPool }}
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RustTarget: x86_64-pc-windows-gnu
              HostIsWindows: true
              PublishArtifacts: ${{ parameters.IsReleaseBuild }}

      - job: x86_64_linux_gnu
        displayName: "Linux x86_64"
        pool: ${{ parameters.LinuxPool }}
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RustTarget: x86_64-unknown-linux-gnu
              PublishArtifacts: ${{ parameters.IsReleaseBuild }}

      - job: x86_64_apple_darwin
        displayName: "macOS x86_64"
        pool: ${{ parameters.MacPool }}
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RustTarget: x86_64-apple-darwin
              PublishArtifacts: ${{ parameters.IsReleaseBuild }}

      - job: aarch64_apple_darwin
        displayName: "macOS aarch64"
        pool: ${{ parameters.MacPool }}
        steps:
          - template: /script/pipelines/build-job.yml
            parameters:
              RustTarget: aarch64-apple-darwin
              PublishArtifacts: ${{ parameters.IsReleaseBuild }}

              # The job runs on an x86_64 machine, so we can't run tests.
              RunGoTests: false
              RunRustTests: false

  - ${{ if eq(parameters.IsReleaseBuild, true) }}:
      - stage: Package
        dependsOn:
          - Build
        jobs:
          - job: package
            displayName: "Create packages"
            pool: ${{ parameters.LinuxPool }}
            steps:
              - checkout: none
              - download: current
                patterns: "**"
              - bash: |
                  # Move up to the pipeline workspace directory.
                  # The default working directory is in the 's' subdirectory of this one.
                  # See https://learn.microsoft.com/en-us/azure/devops/pipelines/agents/agents?view=azure-devops&tabs=yaml%2Cbrowser#agent-directory-structure for more.
                  cd "$(Pipeline.Workspace)"

                  prepare_package() {
                    local prefix="$1"
                    output_dir=./s/output/$prefix
                    mkdir -p $output_dir
                    echo "Created $output_dir"
                    for dir in $(find . -maxdepth 1 -mindepth 1 -type d -name ${prefix}_\*); do
                      target=$(echo $dir | cut -d'_' -f 2-)
                      source="$dir/libcosmoscx.a"
                      mkdir "$output_dir/$target"
                      echo "Moving $source to $output_dir/$target"
                      mv $source "$output_dir/$target"
                    done
                  }

                  prepare_package "vendored"
              - publish: output
                displayName: "Publish packages"
                artifact: "packages"

      - stage: publish
        dependsOn:
          - Package
        jobs:
          - job: publish_go
            displayName: "Publish Go Wrapper"
            pool: ${{ parameters.LinuxPool }}
            steps:
              - checkout: self
                fetchTags: true
              - download: current
                patterns: "packages/vendored/**"
              - bash: |
                  tag_name="go/azcosmoscx/v${{ parameters.GoReleaseVersion }}"
                  branch_name="azp-release-staging/${{ parameters.GoReleaseVersion }}"

                  echo "Preparing Go wrapper release tag '$tag_name'"
                  if git rev-parse -q --verify "refs/tags/$tag_name" >/dev/null; then
                    echo "Error: Git tag '$tag_name' already exists. Aborting release."
                    exit 1
                  fi

                  git checkout -b "$branch_name"

                  src_dir="$(Pipeline.Workspace)/packages/vendored"
                  dest_dir="./go/azcosmoscx/libcosmoscx-vendor"

                  echo "Creating destination directory '$dest_dir'"
                  mkdir -p "$dest_dir"

                  # Ensure there is at least one subdirectory to copy
                  if ! find "$src_dir" -maxdepth 1 -mindepth 1 -type d -print -quit >/dev/null 2>&1; then
                    echo "No subdirectories found in '$src_dir' to copy."
                    exit 1
                  fi

                  echo "Copying subdirectories from '$src_dir' into '$dest_dir' (subdirs become direct children)"
                  # rsync copies the contents of src_dir into dest_dir, making each top-level subdirectory a direct child
                  rsync -a --chmod=ugo=rwX "$src_dir"/ "$dest_dir"/

                  echo "Copy complete."

                  tree ./go/azcosmoscx
                displayName: "Place vendored binaries"
