parameters:
  - name: RustTarget
    type: string
    default: ""
  - name: CrossCompiler
    type: string
    default: ""
  - name: DpkgArchitecture
    type: string
    default: ""
  - name: HostIsWindows
    type: boolean
    default: false
  - name: CargoCache
    type: boolean
    default: false
  - name: UseMicrosoftToolChain
    type: boolean
    default: false
  - name: IsReleaseBuild
    type: boolean
    default: false
  - name: IncludePython
    type: boolean
    default: true

steps:
  - ${{ if ne(parameters.DpkgArchitecture, '') }}:
      - script: |
          # Install aarch64 OpenSSL for cross-compilation
          sudo dpkg --add-architecture "${{ parameters.DpkgArchitecture }}"
          sudo apt-get update
          sudo apt-get install libssl-dev:${{ parameters.DpkgArchitecture }}
        displayName: "Install cross-compilation dependencies"

  - ${{ if ne(parameters.CrossCompiler, '') }}:
      - script: |
          # The apt package is "gcc-[triple]" but the compiler binary itself is "[triple]-gcc"
          sudo apt-get update
          sudo apt-get install "gcc-${{ parameters.CrossCompiler }}
          echo "##vso[task.setvariable variable=RUST_LINKER]${{ parameters.CrossCompiler }}-gcc"
        displayName: "Install cross-compiler"

  - task: GoTool@0
    displayName: "Install Go $(GO_VERSION)"
    inputs:
      version: $(GO_VERSION)

  - ${{ if eq(parameters.IncludePython, true) }}:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PY_VERSION)
          addToPath: true
        displayName: "Use Python $(PY_VERSION)"

  - ${{ if ne(parameters.RustTarget, '') }}:
      - ${{ if eq(parameters.IsReleaseBuild, true) }}:
          - script: |
              mv .cargo/config.toml .cargo/public.config.toml
              mv .cargo/microsoft-internal.config.toml .cargo/config.toml
            displayName: "Activating Microsoft internal Cargo feed"
          - task: CargoAuthenticate@0
            inputs:
              configFile: ".cargo/config.toml"
            displayName: "Authenticating with internal Cargo feed"
      - ${{ if eq(parameters.UseMicrosoftToolchain, true) }}:
          - script: |
              mv rust-toolchain.toml rust-toolchain.public.toml
              mv rust-toolchain.internal.toml rust-toolchain.toml
            displayName: "Activating Microsoft internal toolchain"
          - task: RustInstaller@1
            displayName: "Install Microsoft Rust Toolchain for target ${{ parameters.RustTarget }}"
            inputs:
              toolchainFeed: https://pkgs.dev.azure.com/msdata/CosmosDB/_packaging/RustToolSet/nuget/v3/index.json
              additionalTargets: ${{ parameters.RustTarget }}
      - ${{ if eq(parameters.UseMicrosoftToolchain, false) }}:
          - script: rustup target add ${{ parameters.RustTarget }}
            displayName: "Install Rust Target ${{ parameters.RustTarget }}"
      - pwsh: |
          Write-Host "##vso[task.setvariable variable=CARGO_BUILD_TARGET]${{ parameters.RustTarget }}"
        displayName: "Initialize Variables"

  - ${{ if eq(parameters.CargoCache, true) }}:
      - task: Cache@2
        inputs:
          key: '"cargo-registry" | "${{ parameters.RustTarget }}" | Cargo.lock'
          ${{ if eq(parameters.HostIsWindows, true )}}:
            path: $(UserProfile)/.cargo/registry
          ${{ if eq(parameters.HostIsWindows, false )}}:
            path: $(HOME)/.cargo/registry
        displayName: "Restore Cargo Registry Cache"
      - task: Cache@2
        inputs:
          key: '"cargo" | "${{ parameters.RustTarget }}" | Cargo.lock'
          path: $(Build.SourcesDirectory)/target
        displayName: "Restore Cargo Build Cache"

  - powershell: script/bootstrap.ps1
    displayName: "Bootstrap Repo"
